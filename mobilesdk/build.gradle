plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'org.jetbrains.dokka'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdk 30

    defaultConfig {
        minSdk 21 // Required by okhttp (from version 3.13 onwards)
        targetSdk 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
        buildConfigField('String', 'SDK_VERSION', "\"$version\"")
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    testImplementation project(':testcommon')
    androidTestImplementation project(':testcommon')

    implementation libs.'kotlinx-coroutines-core'
    implementation libs.'kotlinx-coroutines-android'

    implementation libs.'androidx-appcompat'
    implementation libs.'androidx-core-ktx'

    implementation libs.'fragment-ktx'
    debugImplementation libs.'fragment-testing'

    implementation libs.'lifecycle-livedata-ktx'
    implementation libs.'lifecycle-viewmodel-ktx'

    implementation libs.constraintlayout
    implementation libs.swiperefreshlayout
    implementation libs.coordinatorlayout
    implementation libs.material

    implementation libs.okhttp

    implementation libs.gson

    compileOnly libs.'joda-time'
    compileOnly libs.threetenbp

    testImplementation libs.'androidx-test-core'
    testImplementation libs.'espresso-core'
    testImplementation libs.'espresso-intents'
    testImplementation libs.'androidx-test-junit'
    testImplementation libs.junit
    testImplementation libs.robolectric
    testImplementation libs.'mockito-inline'
    testImplementation libs.'mockito-kotlin'

    androidTestImplementation libs.'androidx-test-core'
    androidTestImplementation libs.'androidx-test-runner'
    androidTestImplementation libs.'espresso-core'
    androidTestImplementation libs.'espresso-web'
    androidTestImplementation libs.junit
    androidTestImplementation libs.'dexmaker-mockito-inline'
    androidTestImplementation libs.'mockito-kotlin'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    from dokkaJavadoc.outputDirectory
    archiveClassifier.set('javadoc')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifact sourceJar
                artifact javadocJar

                pom {
                    name = "$groupId:$artifactId"
                    description = 'A library for integrating Swedbank Pay payments into an Android application'
                    url = 'https://developer.swedbankpay.com/modules-sdks/mobile-sdk/'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name = 'Swedbank Pay'
                            email = 'opensource@swedbankpay.com'
                            organization = 'Swedbank Pay'
                            organizationUrl = 'https://www.swedbankpay.com/'
                        }
                        developer {
                            name = 'Pertti Kr√∂ger'
                            email = 'pertti@qvik.fi'
                            organization = 'Qvik'
                            organizationUrl = "https://qvik.com/"
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/SwedbankPay/swedbank-pay-sdk-android.git'
                        developerConnection = 'scm:git:ssh://github.com:SwedbankPay/swedbank-pay-sdk-android.git'
                        url = 'https://github.com/SwedbankPay/swedbank-pay-sdk-android'
                    }
                }
            }
        }
    }

    signing {
        def signingKey = System.getenv('SIGNING_KEY')
        def signingKeyPassword = System.getenv('SIGNING_KEY_PASSWORD')
        if (signingKey && signingKeyPassword) {
            def signingKeyId = System.getenv('SIGNING_KEY_ID')
            if (signingKeyId?.isEmpty()) signingKeyId = null
            useInMemoryPgpKeys(signingKeyId, signingKey, signingKeyPassword)
            sign publishing.publications.release
        }
    }
}
